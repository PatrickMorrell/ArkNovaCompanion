@inject IScoreService ScoreService

<div class="position-relative square-third rounded-3 bg-dodgerblue m-3" @onclick="()=> UpdateScore(1)">
		<div class="position-absolute top-50 start-50 translate-middle text-light opacity-50">
			<FontAwesome IconName="@GetIconName()" Size="@GetIconSize()"></FontAwesome>
		</div>
		<div class="d-flex justify-content-center">
			<strong class="position-relative fs-x-3 text-light text-outline no-select">
			@GetScore()
		</strong>
		</div>
	<div class="position-absolute top-100 start-100 translate-middle">
		<button class="btn btn-danger" @onclick="() => UpdateScore(-1)" @onclick:stopPropagation="true">
			<FontAwesome IconName="minus" Size="3"></FontAwesome>
		</button>
	</div>
</div>


@code {
	[Parameter]
	public string? ScoreType { get; set; }

	protected override async Task OnInitializedAsync()
	{
		ScoreService.OnScoreChanged += StateHasChanged;
		await ScoreService.GetStoredScores();
		StateHasChanged();
	}

	public void Dispose()
	{
		ScoreService.OnScoreChanged -= StateHasChanged;
	}

	private string GetIconName()
	{
		switch (ScoreType)
		{
			case ScoreTypes.Conservation:
				return "shield-heart";
			case ScoreTypes.Appeal:
				return "ticket";
			case ScoreTypes.Reputation:
				return "graduation-cap";
			default:
				return "";
		}
	}

	private string GetIconSize()
	{
		int score = GetScore();
		int maxScore = GetMaxScore();
		int normalizedScore = (int)(100 * score / maxScore);

		if (normalizedScore < 20)
		{
			return "x-3";
		}
		else if (normalizedScore < 50)
		{
			return "x-2";
		}
		else
		{
			return "x-1";
		}
	}

	private int GetScore()
	{
		switch (ScoreType)
		{
			case ScoreTypes.Conservation:
				return ScoreService.Scores.Conservation;
			case ScoreTypes.Appeal:
				return ScoreService.Scores.Appeal;
			case ScoreTypes.Reputation:
				return ScoreService.Scores.Reputation;
			default:
				return 0;
		}
	}

	private int GetMaxScore()
	{
		switch (ScoreType)
		{
			case ScoreTypes.Conservation:
				return 41;
			case ScoreTypes.Appeal:
				return 113;
			case ScoreTypes.Reputation:
				return 15;
			default:
				return 0;
		}
	}

	private void UpdateScore(int points)
	{
		switch (ScoreType)
		{
			case ScoreTypes.Conservation:
				ScoreService.UpdateConservation(points);
				break;
			case ScoreTypes.Appeal:
				ScoreService.UpdateAppeal(points);
				break;
			case ScoreTypes.Reputation:
				ScoreService.UpdateReputation(points);
				break;
		}
	}
}
