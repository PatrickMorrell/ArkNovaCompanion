@inject IActionService ActionService
@inject IBreakService BreakService
@inject IMoneyService MoneyService
@inject IBuildingService BuildingService
<h3>Actions</h3>

@if (ActionService.Actions.Any())
{
    <div class="d-flex">
        @foreach (ActionModel action in ActionService.Actions)
        {
            string modalId = $"{action.Name}Modal";

            <div class="d-flex flex-column align-items-center">
                <div class="square-1 rounded-4 text-bg-dark m-2">
                    <div class="container fs-2">@(action.Strength)</div>
                </div>
                <div data-bs-toggle="modal" data-bs-target="#@(modalId)">
                    <ActionCard Action=action></ActionCard>
                </div>
                <button class="btn btn-primary" @onclick="() => ActionService.UpgradeAction(action)">
                    <FontAwesome IconName="rotate"></FontAwesome>
                </button>
            </div>        <div id="@modalId" class="modal fade" tabindex="-1">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content w-auto">
                        <ActionCard Action=action></ActionCard>
                        <div class="d-flex justify-content-around mt-1 mb-2" data-bs-dismiss="modal">
                            <button class="btn btn-primary" @onclick="() => OnActionClick(action)">
                                <FontAwesome IconName=@action.IconName></FontAwesome>
                            </button>
                            @if (action.Name == ActionNames.Sponsors)
                            {
                                <button class="btn btn-primary" @onclick="() => OnActionClick(action, true)">
                                    <FontAwesome IconName="mug-hot"></FontAwesome>
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

<Modal Id="buildMenuModal" @ref="modal">
    <Body>
        <BuildMenu MaxSize=@BuildSize IsUpgraded="@BuildUpgraded"></BuildMenu>
    </Body>
</Modal>

@code {
    private Modal modal { get; set; }
    private int BuildSize;
    private bool BuildUpgraded;

    protected override void OnInitialized()
    {
        ActionService.OnActionsChanged += StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ActionService.GetStoredActions();
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        ActionService.OnActionsChanged -= StateHasChanged;
    }

    private async Task OnActionClick(ActionModel action, bool isBreakAction = false)
    {
        // wait for modal to hide
        await Task.Delay(250);
        StateHasChanged();

        if (isBreakAction)
        {
            BreakService.AdvanceBreak(action.Strength);
            MoneyService.AddCoins(action.Strength);
        }
        else
        {
            BreakService.AdvanceBreak(action.Name == ActionNames.Cards ? 2 : 0);
        }

        if (action.Name == ActionNames.Build)
        {
            await OpenBuildMenu(action);
        }
        else
        {
            ActionService.MoveAction(action);
        }
    }

    private async Task OpenBuildMenu(ActionModel action)
    {
        BuildUpgraded = action.IsUpgraded;
        BuildSize = action.Strength;
        await modal.Open();
    }
}