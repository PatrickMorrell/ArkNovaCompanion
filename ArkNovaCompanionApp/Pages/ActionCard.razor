
<div class="card @(Action.IsUpgraded ? "text-bg-success" : "text-bg-info") m-1">
	<div class="card-body">
		<h4 class="card-title d-flex justify-content-between mb-5">
			<FontAwesome IconName="@Action.IconName"></FontAwesome>
			@Action.Name
		</h4>
		<p class="card-text d-flex flex-column justify-content-between">
			@(new MarkupString(GetDescription(Action)))
		</p>
	</div>
</div>

@code {
	[Parameter]
	public ActionModel? Action { get; set; }

	private string GetDescription(ActionModel action)
	{
		string description = action.IsUpgraded ? action.UpgradedDescription : action.Description;
		description = description.Replace("[STRENGTH]", action.Strength.ToString());

		if (action.Name == "Animals")
		{
			string animals = CalculateAnimals(action.Strength, action.IsUpgraded, out bool givesRep);
			description = description.Replace("[ANIMALS]", animals)
				.Replace("[REPUTATION]", givesRep ? "<div>Gain 1 reputation <i class=\"fa-solid fa-graduation-cap fs-3 px-1\"></i></div>" : "");
		}
		else if (action.Name == "Cards")
		{
			string cards = CalculateCards(action.Strength, action.IsUpgraded, out bool discard, out bool allowSnap);
			description = description.Replace("[CARDS]", cards)
				.Replace("[DISCARD]", discard ? " and <strong>discard 1 card</strong>" : "")
				.Replace("[SNAP]", allowSnap ? "<div>OR snap <i class=\"fa-solid fa-folder-closed fs-3 px-1\"></i></div>" : "");
		}

		return description;
	}

	private string CalculateAnimals(int strength, bool upgraded, out bool givesReputation)
	{
		givesReputation = false;
		if (upgraded)
		{
			if (strength == 5)
			{
				givesReputation = true;
				return "2 Animal cards";
			}
			if (strength > 2)
			{
				return "2 Animal cards";
			}
			else
			{
				return "1 Animal card";
			}
		}
		else
		{
			if (strength == 5)
			{
				return "2 Animal cards";
			}
			else if (strength > 1)
			{
				return "1 Animal card";
			}
			else
			{
				return "0 Animal cards";
			}
		}
	}

	private string CalculateCards(int strength, bool upgraded, out bool discard, out bool allowSnapping)
	{
		allowSnapping = false;
		discard = false;
		if (upgraded)
		{
			switch (strength)
			{
				case 5:
					allowSnapping = true;
					discard = true;
					return "4 cards";
				case 4:
					allowSnapping = true;
					discard = true;
					return "3 cards";
				case 3:
					allowSnapping = true;
					return "2 cards";
				case 2:
					discard = true;
					return "2 cards";
				default:
					return "1 card";
			}
		}
		else
		{
			switch (strength)
			{
				case 5:
					allowSnapping = true;
					discard = true;
					return "3 cards";
				case 4:
					return "2 cards";
				case 3:
					discard = true;
					return "2 cards";
				case 2:
					return "1 card";
				default:
					discard = true;
					return "1 card";
			}
		}
	}
}