@inject IBuildingService BuildingService
@inject IBreakService BreakService
@inject IMoneyService MoneyService
@inject IScoreService ScoreService
@inject IWorkerService WorkerService
@inject ITokenService TokenService

@*
    New Features
        - confirm popup on clear storage
        - keep track of number of cards in hand
        - add modifiers to action cards
        - record active bonuses from supporting CPs
        - create drawer for association board
        - keep log of states
        - mark menu items when UI updates
        ------------------------------------------------------------
        - provide undo function
        - helper for game setup
        - use signalR to keep game state updated for everyone
*@

@page "/"
<PageTitle>Home</PageTitle>

<Menu MenuItemSelected="SetSelected" Selected=@Selected></Menu>

@switch (Selected)
{
    case "actions":
        <Actions></Actions>
        break;
    case "money":
        <Money></Money>
        <div class="d-flex justify-content-center m-1">
            <XTokens></XTokens>
        </div>
        break;
    case "break":
        <Break></Break>
        break;
    case "scores":
        <ScoreTracks></ScoreTracks>
        break;
    case "park":
        <div class="d-flex justify-content-center my-3">
            <Workers></Workers>
        </div>
        <div class="my-3">
            <Buildings></Buildings>
        </div>
        break;
}

@code {
    private int start = 10;
    private string Selected = "actions";

    protected override async Task OnInitializedAsync()
    {
        await BuildingService.GetStoredBuildings();
        await BreakService.GetStoredBreak(start);
        await MoneyService.GetStoredMoney();
        await ScoreService.GetStoredScores();
        await WorkerService.GetStoredWorkers();
        await TokenService.GetStoredTokens();
    }

    private void SetSelected(string selected)
    {
        Selected = selected;
    }
}