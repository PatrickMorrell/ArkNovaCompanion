@inject IActionService ActionService
@inject IBuildingService BuildingService
@inject IBreakService BreakService
@inject IMoneyService MoneyService
@inject IScoreService ScoreService
@inject IWorkerService WorkerService
@inject ITokenService TokenService
@inject IMenuService MenuService

@*
    New Features
        - keep track of number of cards in hand
        - add modifiers to action cards
        - record active bonuses from supporting CPs
        - create drawer for association board
        - keep log of states
        - mark menu items when UI updates
        - control for player count
        ------------------------------------------------------------
        - provide undo function
        - helper for game setup
        - use signalR to keep game state updated for everyone
*@

@page "/"
<PageTitle>Home</PageTitle>

<Menu></Menu>

@foreach (MenuItemModel item in MenuService.Menu ?? new List<MenuItemModel>())
{
    if (item.IsSelected)
    {
        @switch (item.ItemName)
        {
            case MenuItems.Actions:
                <Actions></Actions>
                break;
            case MenuItems.Money:
                <Money></Money>
                <div class="d-flex justify-content-center m-1">
                    <XTokens></XTokens>
                </div>
                break;
            case MenuItems.Break:
                <Break></Break>
                break;
            case MenuItems.Scores:
                <ScoreTracks></ScoreTracks>
                break;
            case MenuItems.Park:
                <div class="d-flex justify-content-center my-3">
                    <Workers></Workers>
                </div>
                <div class="my-3">
                    <Buildings></Buildings>
                </div>
                break;
        }
    }
}


@code {
    private int start = 10;

    protected override async Task OnInitializedAsync()
    {
        await ActionService.GetStoredActions();
        await BuildingService.GetStoredBuildings();
        await BreakService.GetStoredBreak(start);
        await MoneyService.GetStoredMoney();
        await ScoreService.GetStoredScores();
        await WorkerService.GetStoredWorkers();
        await TokenService.GetStoredTokens();
        await MenuService.GetStoredMenu();
    }

    protected override void OnInitialized()
    {
        MenuService.OnMenuChanged += StateHasChanged;
    }

    public void Dispose()
    {
        MenuService.OnMenuChanged -= StateHasChanged;
    }
}