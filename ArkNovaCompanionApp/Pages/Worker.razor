@inject IWorkerService WorkerService

@{
	var thisWorker = WorkerService.Workers[WorkerNumber];
	int activeWorkers = GetActiveWorkerCount();
	bool isActive = activeWorkers > WorkerNumber;
}

<div class="@(isActive ? "text-dark" : "text-primary")" >
	@if (thisWorker.IsUsed)
	{
		<div class="text-light m-2" @onclick="() => WorkerService.ToggleWorker(thisWorker)" @onclick:stopPropagation="@isActive">
			<FontAwesome IconName="user" Size="x-1"></FontAwesome>
		</div>
	}
	else
	{
		<div class="m-3" @onclick="() => WorkerService.ToggleWorker(thisWorker)" @onclick:stopPropagation="@isActive">
			<FontAwesome IconName="user" Size="x-2"></FontAwesome>
		</div>
	}
</div>

@code {
	[Parameter]
	public int WorkerNumber { get; set; }

	protected override async Task OnInitializedAsync()
	{
		WorkerService.OnWorkersChanged += StateHasChanged;
		await WorkerService.GetStoredWorkers();
		StateHasChanged();
	}

	public void Dispose()
	{
		WorkerService.OnWorkersChanged -= StateHasChanged;
	}

	private int GetActiveWorkerCount()
	{
		return WorkerService.Workers.Count(w => w.IsActive);
	}
}