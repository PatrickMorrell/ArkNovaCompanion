@inject IWorkerService WorkerService

@{
	var thisWorker = WorkerService.Workers[WorkerNumber];
	int activeWorkers = GetActiveWorkerCount();
}

<div class="@(activeWorkers > WorkerNumber ? "text-dark" : "text-primary")" @onclick="() => AddWorker(activeWorkers)">
	@if (thisWorker.IsUsed)
	{
		<div class="text-light m-2" @onclick="() => WorkerService.ToggleWorker(thisWorker)">
			<FontAwesome IconName="user" Size="x-1"></FontAwesome>
		</div>
	}
	else
	{
		<div class="m-3" @onclick="() => WorkerService.ToggleWorker(thisWorker)">
			<FontAwesome IconName="user" Size="x-2"></FontAwesome>
		</div>
	}
</div>

@code {
	[Parameter]
	public int WorkerNumber { get; set; }


	protected override void OnInitialized()
	{
		WorkerService.OnWorkersChanged += StateHasChanged;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await WorkerService.GetStoredWorkers();
			StateHasChanged();
		}
	}

	public void Dispose()
	{
		WorkerService.OnWorkersChanged -= StateHasChanged;
	}

	private int GetActiveWorkerCount()
	{
		return WorkerService.Workers.Count(w => w.IsActive);
	}

	private void AddWorker(int activeWorkers)
	{
		if (activeWorkers > WorkerNumber)
		{
			return;
		}

		WorkerService.AddWorker();
	}
}