@inject IMoneyService MoneyService

<strong class="d-flex centre rounded-4 bg-warning m-2 fs-1">@GetMoneyTotal()</strong>

@foreach (var coin in MoneyService.Coins)
{
	<div class="d-flex position-relative">
		<button class="btn btn-primary m-2" @onclick="() => MoneyService.AddMoney(coin)">
			<div class="d-flex flex-column centre">
				<div class="square-2 rounded-2 border border-2">
					<div class="container centre fs-5">@coin.Value</div>
				</div>
				<FontAwesome IconName="hand-holding"></FontAwesome>
			</div>
		</button>
		@for (int i = 1; i <= coin.Amount; i++)
		{
			@if (i == 1)
			{
				<div class="position-absolute align-items-center justify-content-center square-1 rounded-4 bg-warning border border-2 border-dark m-2"
					 style="left: 5rem; top: 1rem;" @onclick="() => MoneyService.RemoveMoney(coin)">
					<div class="container centre fs-2">@coin.Value</div>
				</div>
			}
			else
			{
				<div class="position-absolute square-1 rounded-4 bg-warning border border-2 border-dark m-2"
					 style="left: @(4 + i)rem; top: 1rem; z-index: -@i;">
				</div>
			}
		}
	</div>
}

@code {
	protected override void OnInitialized()
	{
		MoneyService.OnMoneyChanged += StateHasChanged;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await MoneyService.GetStoredMoney();
			StateHasChanged();
		}
	}

	public void Dispose()
	{
		MoneyService.OnMoneyChanged -= StateHasChanged;
	}

	private int GetMoneyTotal()
	{
		if (!MoneyService.Coins.Any())
		{
			return 0;
		}
		else
		{
			return MoneyService.Coins.Sum(c => (c.Value * c.Amount));
		}
	}

}
