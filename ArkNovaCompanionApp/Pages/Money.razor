@inject IMoneyService MoneyService
<h3>Money</h3>

@if (MoneyService.Coins.Any())
{
    <div>
        @foreach (var coin in MoneyService.Coins)
        {
            <button class="btn btn-primary square-1" @onclick="() => MoneyService.AddMoney(coin)">+@coin.Value</button>
        }
    </div>
    <div>
        @foreach (var coin in MoneyService.Coins)
        {
            <button class="btn btn-danger square-1" @onclick="() => MoneyService.RemoveMoney(coin)">-@coin.Value</button>
        }
    </div>
    <div class="d-flex flex-wrap w-25">
        @foreach (var coin in MoneyService.Coins)
        {
            for (int i = 0; i < coin.Amount; i++)
            {
                <div class="square-1 rounded-4 bg-warning m-2">
                    <div class="container fs-2">@coin.Value</div>
                </div>
            }
        }
    </div>
}

<p>Total amount: @GetMoneyTotal()</p>

@code {
    protected override void OnInitialized()
    {
        MoneyService.OnMoneyChanged += StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await MoneyService.GetStoredMoney();
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        MoneyService.OnMoneyChanged -= StateHasChanged;
    }

    private int GetMoneyTotal()
    {
        if (!MoneyService.Coins.Any())
        {
            return 0;
        }
        else
        {
            return MoneyService.Coins.Sum(c => (c.Value * c.Amount));
        }
    }

}
