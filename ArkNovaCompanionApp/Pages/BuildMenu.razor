@inject IBuildingService BuildingService
@inject ICollectionService CollectionService
@inject IActionService ActionService
@inject IMoneyService MoneyService

@{
    SizeRemaining = MaxSize - GetSelectedTotal();
}

<div class="d-flex justify-content-center m-3">
    @for (int i = 0; i < MaxSize; i++)
    {
        <div class="@((i + 1) > SizeRemaining ? "opacity-50" : "")">
            <FontAwesome IconName="hammer" Size="3"></FontAwesome>
        </div>
    }
</div>

<div class="justify-content-center">
    @for (int i = 1; i <= 5; i++)
    {
        <div class="container row my-2">
            @foreach (bool isStandard in new bool[] { true, false })
            {
                BuildingTypeModel building = buildings.Where(b => b.IsStandard == isStandard && b.Order == i).First();
                <div class="col d-flex justify-content-center">
                    <div class="row centre">
                        <div class="col-6">
                            @if (CanToggleSelected(building))
                            {
                                <div class="@(building.IsSelected ? "text-primary" : "")" @onclick="() => ToggleSelect(building)">
                                    <BuildingType Model=building></BuildingType>
                                </div>
                            }
                            else
                            {
                                <div class="opacity-50">
                                    <BuildingType Model=building></BuildingType>
                                </div>
                            }
                        </div>
                        <div class="col-6">
                            <i class="bi bi-@(building.Size)-square-fill fs-1 px-1"></i>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<div class="d-flex justify-content-between m-2">
    <button type="button" class="btn btn-danger" @onclick="() => OnCancelClick()" data-bs-dismiss="modal">
        <FontAwesome IconName="xmark" Size="3"></FontAwesome>
    </button>
    <div class="square-1 rounded-4 bg-warning">
        <strong class="container centre fs-2">@MoneyService.GetMoneyTotal()</strong>
    </div>
    <button class="btn btn-success" @onclick="() => OnConfirmClick()" data-bs-dismiss="modal">
        <FontAwesome IconName="check" Size="3"></FontAwesome>
    </button>
</div>

@code {
    [Parameter]
    public int MaxSize { get; set; }

    [Parameter]
    public bool IsUpgraded { get; set; }

    List<BuildingTypeModel> buildings;

    public int SizeRemaining;

    protected override void OnInitialized()
    {
        buildings = CollectionService.GetBuildingTypes();
    }

    private void ToggleSelect(BuildingTypeModel building)
    {
        building.IsSelected = !building.IsSelected && (GetSelectedTotal() + building.Size <= MaxSize);
    }

    private bool CanToggleSelected(BuildingTypeModel building)
    {
        if (building.IsSelected)
        {
            return true;
        }
        else if (building.Size > SizeRemaining)
        {
            return false;
        }
        else if (building.Size * 2 + buildings.Where(b => b.IsSelected).Sum(b => b.Size * 2) > MoneyService.GetMoneyTotal())
        {
            return false;
        }
        else if (!IsUpgraded && buildings.Any(b => b.IsSelected))
        {
            return false;
        }
        else if (!IsUpgraded && new string[] { BuildingTypes.ReptileHouse, BuildingTypes.LargeBirdAviary }.Contains(building.Name))
        {
            return false;
        }
        else if (SpecialEnclosureExists(building))
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    private bool SpecialEnclosureExists(BuildingTypeModel building)
    {
        string[] specials = { BuildingTypes.PettingZoo, BuildingTypes.ReptileHouse, BuildingTypes.LargeBirdAviary };
        foreach (string enclosure in specials)
        {
            if (building.Name == enclosure && BuildingService.Buildings is not null && BuildingService.Buildings.Exists(b => b.Name == enclosure))
            {
                return true;
            }
        }

        return false;
    }

    private int GetSelectedTotal()
    {
        return buildings.Where(b => b.IsSelected).Sum(b => b.Size);
    }

    private void OnConfirmClick()
    {
        BuildingService.SaveBuildings(buildings.Where(b => b.IsSelected).ToList());
        buildings.ForEach(b => b.IsSelected = false);
        ActionService.MoveAction(ActionNames.Build);
    }

    private void OnCancelClick()
    {
        buildings.ForEach(b => b.IsSelected = false);
    }
}
