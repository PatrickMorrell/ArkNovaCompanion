@inject IBuildingService BuildingService
@inject ICollectionService CollectionService
@inject IActionService ActionService

@{
	SizeRemaining = MaxSize - GetSelectedTotal();
}

<div class="d-flex justify-content-center m-2">
	@for (int i = 0; i < MaxSize; i++)
	{
		<div class="@((i + 1) > SizeRemaining ? "opacity-50" : "")">
			<FontAwesome IconName="hammer" Size="3"></FontAwesome>
		</div>
	}
</div>

<div class="row justify-content-center">
	@foreach (bool isStandard in new bool[] { true, false })
	{
		<div class="col-5">
			@foreach (BuildingModel building in buildings.Where(b => b.IsStandard == isStandard))
			{
				@if (CanToggleSelected(building))
				{
					<div class="d-flex align-items-center justify-content-center @(building.IsSelected ? "text-primary" : "") mx-1">
						<div @onclick="() => ToggleSelect(building)">
							<FontAwesome IconName="@building.Icon" Size=@(building.IsSelected ? "x-3" : "x-4")></FontAwesome>
						</div>
						<div class="square-2 rounded-2 text-bg-dark m-2">
							<div class="container fs-4">@(building.Size)</div>
						</div>
					</div>
				}
				else
				{
					<div class="d-flex align-items-center justify-content-center mx-1 opacity-50">
						<FontAwesome IconName="@building.Icon" Size="x-4"></FontAwesome>
						<div class="square-2 rounded-2 text-bg-dark m-2">
							<div class="container fs-4">@(building.Size)</div>
						</div>
					</div>
				}
			}
		</div>
	}
</div>

<div class="d-flex justify-content-between m-2">
		<button type="button" class="btn btn-danger" @onclick="() => OnCancelClick()" data-bs-dismiss="modal">
			<FontAwesome IconName="xmark" Size="3"></FontAwesome>
		</button>
		<button class="btn btn-success" @onclick="() => OnConfirmClick()" data-bs-dismiss="modal">
			<FontAwesome IconName="check" Size="3"></FontAwesome>
		</button>
</div>

@code {
	[Parameter]
	public int MaxSize { get; set; }

	[Parameter]
	public bool IsUpgraded { get; set; }

	List<BuildingModel> buildings;

	public int SizeRemaining;

	protected override void OnInitialized()
	{
		buildings = CollectionService.GetBuildingsDefault();
	}

	private void ToggleSelect(BuildingModel building)
	{
		building.IsSelected = !building.IsSelected && (GetSelectedTotal() + building.Size <= MaxSize);
	}

	private bool CanToggleSelected(BuildingModel building)
	{
		if (building.IsSelected)
		{
			return true;
		}
		else if (building.Size > SizeRemaining)
		{
			return false;
		}
		else if (!IsUpgraded && buildings.Any(b => b.IsSelected))
		{
			return false;
		}
		else
		{
			return true;
		}
	}

	private int GetSelectedTotal()
	{
		return buildings.Where(b => b.IsSelected).Sum(b => b.Size);
	}

	private async Task OnConfirmClick()
	{
		await BuildingService.SaveBuildings(buildings.Where(b => b.IsSelected).ToList());
		buildings.ForEach(b => b.IsSelected = false);
		ActionService.MoveAction(ActionNames.Build);
	}

	private void OnCancelClick()
	{
		buildings.ForEach(b => b.IsSelected = false);
	}
}
