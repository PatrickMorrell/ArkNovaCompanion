@inject IBuildingService BuildingService
@inject ICollectionService CollectionService
@inject IActionService ActionService

@{
	SizeRemaining = MaxSize - GetSelectedTotal();
}

<div class="d-flex justify-content-center m-3">
	@for (int i = 0; i < MaxSize; i++)
	{
		<div class="@((i + 1) > SizeRemaining ? "opacity-50" : "")">
			<FontAwesome IconName="hammer" Size="3"></FontAwesome>
		</div>
	}
</div>

<div class="justify-content-center">
	@for (int i = 1; i <= 5; i++)
	{
		<div class="container row my-2">
			@foreach (bool isStandard in new bool[] { true, false })
			{
				BuildingModel building = buildings.Where(b => b.IsStandard == isStandard && b.Order == i).First();
				<div class="col d-flex justify-content-center">
					<div class="row centre">
						<div class="col-6">
							@if (CanToggleSelected(building))
							{
								<div class="@(building.IsSelected ? "text-primary" : "")" @onclick="() => ToggleSelect(building)">
									<Building building=building></Building>
								</div>
							}
							else
							{
								<div class="opacity-50">
									<Building building=building></Building>
								</div>
							}
						</div>
						<div class="col-6">
							<i class="bi bi-@(building.Size)-square-fill fs-1 px-1"></i>
						</div>
					</div>
				</div>
			}
		</div>
	}
</div>

<div class="d-flex justify-content-between m-2">
	<button type="button" class="btn btn-danger" @onclick="() => OnCancelClick()" data-bs-dismiss="modal">
		<FontAwesome IconName="xmark" Size="3"></FontAwesome>
	</button>
	<button class="btn btn-success" @onclick="() => OnConfirmClick()" data-bs-dismiss="modal">
		<FontAwesome IconName="check" Size="3"></FontAwesome>
	</button>
</div>

@code {
	[Parameter]
	public int MaxSize { get; set; }

	[Parameter]
	public bool IsUpgraded { get; set; }

	List<BuildingModel> buildings;

	public int SizeRemaining;

	protected override void OnInitialized()
	{
		buildings = CollectionService.GetBuildingsDefault();
	}

	private void ToggleSelect(BuildingModel building)
	{
		building.IsSelected = !building.IsSelected && (GetSelectedTotal() + building.Size <= MaxSize);
	}

	private bool CanToggleSelected(BuildingModel building)
	{
		if (building.IsSelected)
		{
			return true;
		}
		else if (building.Size > SizeRemaining)
		{
			return false;
		}
		else if (!IsUpgraded && buildings.Any(b => b.IsSelected))
		{
			return false;
		}
		else if (SpecialEnclosureExists(building))
		{
			return false;
		}
		else
		{
			return true;
		}
	}

	private bool SpecialEnclosureExists(BuildingModel building)
	{
		string[] specials = { "Petting Zoo", "Reptile House", "Large Bird Aviary" };
		foreach (string enclosure in specials)
		{
			if (building.Name == enclosure && BuildingService.Buildings.Exists(b => b.Name == enclosure && b.Amount > 0))
			{
				return true;
			}
		}

		return false;
	}

	private int GetSelectedTotal()
	{
		return buildings.Where(b => b.IsSelected).Sum(b => b.Size);
	}

	private async Task OnConfirmClick()
	{
		await BuildingService.SaveBuildings(buildings.Where(b => b.IsSelected).ToList());
		buildings.ForEach(b => b.IsSelected = false);
		ActionService.MoveAction(ActionNames.Build);
	}

	private void OnCancelClick()
	{
		buildings.ForEach(b => b.IsSelected = false);
	}
}
