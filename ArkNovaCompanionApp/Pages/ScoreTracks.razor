@inject IScoreService ScoreService

<div class="row align-items-center my-5">
	<div class="col">
		<div class="row">
			<Score ScoreType="@ScoreTypes.Conservation"></Score>
		</div>
		<div class="row">
			<Score ScoreType="@ScoreTypes.Appeal"></Score>
		</div>
		<div class="row">
			<Score ScoreType="@ScoreTypes.Reputation"></Score>
		</div>
	</div>

	<div class="col">
		<div class="col position-relative square-quarter rounded-4 bg-warning m-5">
			<div class="container centre">
				<strong class="fs-x-2 text-light text-outline" style="z-index: 10;">
					@ScoreService.CalculateIncomeFromAppeal()
				</strong>
				<div class="position-absolute top-50 start-50 translate-middle opacity-50">
					<FontAwesome IconName="coins" Size="x-1"></FontAwesome>
				</div>
			</div>
		</div>

		<div class="col position-relative square-quarter rounded-4 bg-warning m-5">
			<div class="container centre">
				<strong class="fs-x-2 text-light text-outline" style="z-index: 10;">
					@CalculateTotalScore()
				</strong>
				<div class="position-absolute top-50 start-50 translate-middle opacity-50">
					<FontAwesome IconName="star" Size="x-1"></FontAwesome>
				</div>
			</div>
		</div>
	</div>
</div>

@code {
	protected override async Task OnInitializedAsync()
	{
		ScoreService.OnScoreChanged += StateHasChanged;
		await ScoreService.GetStoredScores();
		StateHasChanged();
	}

	public void Dispose()
	{
		ScoreService.OnScoreChanged -= StateHasChanged;
	}

	private int CalculateTotalScore()
	{
		int conservation = ScoreService.Scores.Conservation;
		int conservationScore = 0;
		if (conservation <= 10)
		{
			conservationScore = 2 * (conservation - 7);
		}
		else
		{
			conservationScore = 3 * (conservation - 8);
		}
		return conservationScore + ScoreService.Scores.Appeal;
	}
}
