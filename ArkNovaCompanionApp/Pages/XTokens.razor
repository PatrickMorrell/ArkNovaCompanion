@inject ITokenService TokenService

<div class="position-relative bg-dodgerblue rounded-3 p-3" @onclick="() => TokenService.AddToken()">
    <div class="d-flex justify-content-center">
        @for (int i = 0; i < 2; i++)
        {
            if (i >= TokenService.TokenAmount)
            {
                <div class="m-2 text-primary">
                    <FontAwesome IconName="square" Size="x-3"></FontAwesome>
                </div>
            }
            else
            {
                <div class="m-2 text-dark">
                    <FontAwesome IconName="square-xmark" Size="x-3"></FontAwesome>
                </div>
            }
        }
    </div>
    <div class="d-flex justify-content-center">
        @for (int i = 0; i < 3; i++)
        {
            if ((i + 2) >= TokenService.TokenAmount)
            {
                <div class="m-2 text-primary">
                    <FontAwesome IconName="square" Size="x-3"></FontAwesome>
                </div>
            }
            else
            {
                <div class="m-2 text-dark">
                    <FontAwesome IconName="square-xmark" Size="x-3"></FontAwesome>
                </div>
            }
        }
    </div>
    <div class="position-absolute top-100 start-100 translate-middle">
        <button class="btn btn-danger" @onclick="() => TokenService.RemoveTokens()" @onclick:stopPropagation="true">
            <FontAwesome IconName="minus" Size="3"></FontAwesome>
        </button>
    </div>
</div>

@code {
    protected override void OnInitialized()
    {
        TokenService.OnTokensChanged += StateHasChanged;
    }

    public void Dispose()
    {
        TokenService.OnTokensChanged -= StateHasChanged;
    }
}